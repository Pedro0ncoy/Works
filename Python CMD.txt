Examenes CS MIT: https://courses.csail.mit.edu/6.042/spring18/
::::::::::::PYTHON:::::::::::::::
1.-IMPORTAR:
1.1.-Ejecutar un *.py(script) desde el IDLE.
import os;os.system("start python C:\\Users\\PEDROBERNARDO\\Desktop\\suma.py")
import os;os.system("start cmd")
import os;os.system("start chrome https://www.facebook.com/")

2.-TIPOS DE DATOS: PEP8:Variables
2.2 Asinacion  nombre =valor 
num_entero= 11; print num_entero
num_real= 3.14159;print num_real
tipo_cadena = "Hola mundo";print tipo_cadena
tipo_bool= True;print tipo_bool
//el booleano tiene que comenzar con T o F mayÃºscula.
ojo: //from decimal import *
>>> sum([Decimal('0.1')]*10) == Decimal('1.0') >>True
>>> sum([0.1]*10) == 1.0                       >>False

3.-OPERADORES MATEMATICOS: /PEP8:Colocar un espacio en blanco despues y antede de c/u operador.
ENTEROS:
sumar = 20 + 3; print sumar
restar = 2 - 5; print restar
mutiplicar = -3 * 100; print mutiplicar
dividir1 = 27 / 4; print dividir1
dividir2 = 27 // 4; print dividir2
residuo= 27 % 4; print residuo
exponente= 3 ** 4; print exponente

REALES:
dividir1 = 27.0 / 4.0; print dividir1 >>6.75
dividir1 = 27.0 // 4.0; print dividir1 >>6.0
mutiplicar = -3.40*10.2; print mutiplicar >>-34.68

FUNCIONES NOTABLES:
import math
import math;valor_absoluto=math.fabs(-3); print valor_absoluto
import math;valor_factorial=math.factorial(4);print valor_factorial
import math;valor_redondeo=math.floor(3.4);print valor_redondeo
import math;potencia_euler=math.exp(5);print potencia_euler
import math;potencia_cexp=math.pow(100,3);print potencia_cexp
import math;raiz_cuadrada=math.sqrt(100);print raiz_cuadrada
import math;logaritmo_cbase=math.log(27,3);print logaritmo_cbase
import math;logaritmo_base10=math.log10(100);print logaritmo_base10
math.acos(x), math.sin(x), math.acosh(x), math.pi, math.e

4.-TUPLAS: DATOS VARIABLES EN UN ARREGLO
mi_tupla = ('indice cero',2,3.0,'indice cuatro') #mi tupla con 4 items
print (mi_tupla[2]+mi_tuple[1]) #posicion comenzando desde el inicio. inicia en 0
print (mi_tupla[-1]+mi_tupla[-2]) #posicion comenzando desde el final. inicia en -1
print (mi_tupla[1:3])
print (mi_tupla[:3])
print (mi_tupla[1:])
print (len(mi_tupla))

5.-LISTAS:
mi_lista = ['indice cero',2,3.0,[1,2]]
print

6.-ETL: BONOBO
pip install bonobo

